write a program to capture any filename from the keyboard and display its filename and extension seperately

Output:

Enter any filename:  abc.py
filename : abc
extension: py

--------------------------------------------------------------------------------------------------------

write  a program to capture some delimeted string from the keyboard and split the string with comma and display the length after splitting.

Output:
Enter any delimited string :  python,perl,unix,scala,spark

List elements are : [ python , perl, unix,scala , spark ]
Length of the list  : 5


--------------------------------------------------------------------------------------------------------

write a program for performing the below operaitons

1. define empty tuple
2. append  "unix" to the tuple
3. append few more elements like 'spark', 'scala','hadoop',sccm' to the list
4  append few more elements like 'c','cpp','java','salesforce','sap','unix' to the list
5.  remove java
6  remove salesforce -
7. add  'oracle' at the index 0
8. add ' mongodb' at the index 5
9. reverse all the elements
10. display the total.  no. of eleents of the list
11. display the total count of 'unix' in the list



--------------------------------------------------------------------------------------------------------

define tuple as below
numbers = (10,20,10,20,30,40,60,70)

write a program to remove all the duplicates of the tuple



--------------------------------------------------------------------------------------------------------

write a program to capture 2 numbers from the keyboard and display its sum


Enter first number : 10
Enter second number: 20

Total : 30



--------------------------------------------------------------------------------------------------------

write a program to capture "python programming" from the keyboard and replace "python" with "scala"



--------------------------------------------------------------------------------------------------------

define two lists
alist = [10,20,30,40,50,10]
blist = [40,50,60,70,80]

display all the UNIQUE elements of both alist and blist                      [10,20,30,40,50,60,70,80]
display all the COMMON elements of both alist and blist                    [40,50]

----------------------------------------------------------------------------------------------------
define a string as below

lang = "perl,unix,hadoop,scala,spark,ruby,go"

write a program to check whether 'python' is existing in the string or not.


--------------------------------------------------------------------------------------------------------
capture any string from the keyboard and perform the below operations

1. check whether the string is upper or not
2. convert the string to list
3. display the string exactly in the center of 30 spaces width
4. convert the string into lower case




--------------------------------------------------------------------------------------------------------

write a progam to capture filename from the keyboard and display the type of the file
if the filename is ending with .py  .... display "Its python file"
if the filename is ending with .pl   .... display "Its perl file"
If the filename is ending with .c  ....... display "Its C lang file"
if the filename is ending with .json ...  display "Its json file"

Enter any filename :  info.py
Python file



--------------------------------------------------------------------------------------------------------


write a program to validate the IP address

Enter any IP address : 192.168.0.1
Its valid IP
Enter any IP address : 1001.1.2.3
Invalid IP



--------------------------------------------------------------------------------------------------------

write a program to capture any string from the keyboard and perform the below

if the string is defined in uppercase......   convert the string to lower and display it

if the string is defined in lowercase ...... convert the string to upper and display it.


--------------------------------------------------------------------------------------------------------

write a program to capture username and password from the keyboard and validate the password

condition1:  length of the password should be greater than  5
condition2:   length of the password should be less than 12
condition3:  atleast  one symbol ( @ or * or  $ ) should exist in the password
condition4:  whole password SHOULD not be in upper case

If all the above conditions are matching.. display "Valid password"


--------------------------------------------------------------------------------------------------------

define some tuple as below

alist = ("unix","hadoop","oracle","scala")

and write a program to append "spark" to the tuple



--------------------------------------------------------------------------------------------------------

write a program to display all the numbers from 50 to 1  

--------------------------------------------------------------------------------------------------------

write a program to display all the odd numbers from 20 to 10


--------------------------------------------------------------------------------------------------------

define some list as below

alist = ["google","oracle","microsoft"]

write a program to
add "http://www"  at the beginning and  
add ".com" at tht end of the string

Output:
http://www.google.com
http://www/.oracle.com
http://www.microsoft.com



--------------------------------------------------------------------------------------------------------

define some list as below

domains = ["google","www.unix","oracle.com"]

write a program

to add "www"  at the beginning  if the string is not starting with "www"
  and
".com" at the end of each string if the string is not ending with ".com"

Output:
www.google.com
www.unix.com
www.oracle.com


--------------------------------------------------------------------------------------------------------

write a program to display the below IP addresses

192.168.0.1
192.168.0.2
192.168.0.3
..
..
192.168.0.10



--------------------------------------------------------------------------------------------------------

write a program to display the below IP addresses

192.168.0.1
192.168.0.2
192.168.0.3
..
..
192.168.0.10
192.168.1.1
192.168.1.2
192.168.1.3
..
..
192.168.1.10



--------------------------------------------------------------------------------------------------------
define dictionary as below
   
infodoc =  { 2001: {"ap":70}  , 2002:{"tn":75} , 2003:{"up":50} }

write a program to display the below output

state literacy rate 	
------  ---------------
ap       70
tn        75
up       50



--------------------------------------------------------------------------------------------------------

define some dictionary as below

adict = {"emp1":["raj",28] ,"emp2":["ram",34] ,"emp3":["rita",24]}

write a program to check whether the key "emp2" is existing in the list or not

---------------------------------------------------------------------------------------------

define some list as below

data = ["perl","unix","perl","scala","perl"]

write a program to count the no. of occurences of each item

perl 3
unix 1
scala 1

---------------------------------------------------------------------------------------------




write a program to write all the numbers from 1 to 10 to the file by line

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

write a program to display the below output to the file


192.168.0.1
192.168.0.2
192.168.0.3
..
..
192.168.0.10
------------------------------------------------------------------------------------------------------------------------------------



write a program to read the realestate.csv file and display all the lines from the file
------------------------------------------------------------------------------------------------------------------------------------


write a program to read the file and display ONLY street and city from the file
------------------------------------------------------------------------------------------------------------------------------------


write a program to display all the UNIQUE cities from the file
------------------------------------------------------------------------------------------------------------------------------------

write a program to replace all the lines containing SACRAMENTO with PUNE and display the output

------------------------------------------------------------------------------------------------------------------------------------

write a program to replace all the lines containing SACRAMENTO with PUNE and write the output to backup.csv
------------------------------------------------------------------------------------------------------------------------------------

write a program to display all the cities and count of it..

SACRAMENTO   - 100 times
RIO LINDA    - 43 times

------------------------------------------------------------------------------------------------------------------------------------

write a progrma to display all the files and directories of the current path
------------------------------------------------------------------------------------------------------------------------------------

write a progrma to display all the files and directories of the C:\
------------------------------------------------------------------------------------------------------------------------------------


write a program to display all the files ending with .py from the local path
------------------------------------------------------------------------------------------------------------------------------------

write a program to delete the files ending with .py from the local path

------------------------------------------------------------------------------------------------------------------------------------

write a program to display all the files and directories seperately

files
------
file1
file2

directories
--------------
dir1
dir2
------------------------------------------------------------------------------------------------------------------------------------

write a program to display the size of .py files

------------------------------------------------------------------------------------------------------------------------------------

create two folders as below in the current directory

source     : copy few files to the source
destination: (will be empty)


write a program to copy all the files from source to destination
------------------------------------------------------------------------------------------------------------------------------------



sys           : system config information
urllib.request: working with http
math          : mathematical operations
random        : random numbers
calendar
smtplib       : sending mails
ftplib        : ftp'ng the file
telnetlib     :
logging       : logging all the events
shutil        : copy,move,rmtree ....
filecmp       : comparing directories
zipfile       : create/extract the zip files
rarfile       : create/extract the tar files
tarfile       : create/extract the tarfiles
getpass       : shadowing the password
json          : reading/writing json files
csv           : reading/writing csv files
xml         
sysconfig     : system configuration
collections   : working with dictionaries
argparse      : passing args from command line
optparse      : passing args from command line
time          : working with date and time
datetime      : working with date and time
cryptography  : encrypting and decrypting the passwords
heapq         : performing array operations
gzip          : reading gunzip files 
re            : validating the strings
ipadresss     : validting ip address
platform      : display platform information
pathlib       : creating temp files
threading     : for performing multi threading
multiprocessing: 
subprocess    : invoking the system commands ( linux or dos commands)



third party libraries
---------------------

networking
----------
requests : performing http requests using rest calls
paramiko : interacting with linux servers thru ssh
netmiko  : interacting with routers,switches thru ssh protocol


analytics
-----------
numpy    : numerical operations ( like matrix operation in schooling)
scipy    : scientific formulas
matploblib: visualizations
pandas    : working with data
scikit-learn : all the machine algorithms

database
---------
cx_Oracle : connecting with oracle
pymysql   : connecting with mysql
pymongo   : with MongoDB
pymssql   : with sql server


image processing
-----------------
opencv
pillow`

cloud
------
boto3  ( for aws infra)
oci    ( for oracle cloud)
azure  ( for micsoft azure)

gaming
------
pygame


image processing
-----------------
opencv
pillow`

cloud
------
boto3  ( for aws infra)
oci    ( for oracle cloud)
azure  ( for micsoft azure)

gaming
------
pygame






define a list below

colors = [
{
"colors": "red",
"values": "#f00"
},
{
"colors": "green",
"values": "#0f0"
},
{
"colors": "blue",
"values": "#00f"
},
{
"colors": "cyan",
"values": "#0ff"
},
{
"colors": "magenta",
"values": "#f0f"
},
{
"colors": "yellow",
"values": "#ff0"
},
{
"colors": "black",
"values": "#000"
}
]
write a program to display all the colors and its values.

red(#f00)
green(#0f0)
blue(#00f)
cyan(#0ff)
magenta(#f0f)
yellow(#ff0)
black(#000)


--------------------------------------------------------------------------------------------
define a dictionray as below

{
"id": "0001",
"type": "donut",
"name": "Cake",
"image":
{
"url": "images/0001.jpg",
"width": 200,
"height": 200
},
"thumbnail":
{
"url": "images/thumbnails/0001.jpg",
"width": 32,
"height": 32
}
}

write a program to display the below output:

id           : 0001
type         :donut
name       : Cake
image.width   : 200
image.height : 200
image.url      : images/0001.jpg


------------------------------------------------------------------------------------------
define dictionary as below


ydict = {
  "kind": "youtube#searchListResponse",
  "etag": "\"m2yskBQFythfE4irbTIeOgYYfBU/PaiEDiVxOyCWelLPuuwa9LKz3Gk\"",
  "nextPageToken": "CAUQAA",
  "regionCode": "KE",
  "pageInfo": {
    "totalResults": 4249,
    "resultsPerPage": 5
  },
  "items": [
    {
      "kind": "youtube#searchResult",
      "etag": "\"m2yskBQFythfE4irbTIeOgYYfBU/QpOIr3QKlV5EUlzfFcVvDiJT0hw\"",
      "id": {
        "kind": "youtube#channel",
        "channelId": "UCJowOS1R0FnhipXVqEnYU1A"
      }
    },
    {
      "kind": "youtube#searchResult",
      "etag": "\"m2yskBQFythfE4irbTIeOgYYfBU/AWutzVOt_5p1iLVifyBdfoSTf9E\"",
      "id": {
        "kind": "youtube#video",
        "videoId": "Eqa2nAAhHN0"
      }
    },
    {
      "kind": "youtube#searchResult",
      "etag": "\"m2yskBQFythfE4irbTIeOgYYfBU/2dIR9BTfr7QphpBuY3hPU-h5u-4\"",
      "id": {
        "kind": "youtube#video",
        "videoId": "IirngItQuVs"
      }
    }
  ]
}


write a program to display all etag  information from the dictionary


--------------------------------------------------------------------------------------------------------

create a dictionary as below

{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil's Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}

write a program to display the below output:

Regular (1001)
Chocolate (1002)
Blueberry (1003)
Devil's Food (1004)

---------------------------------------------------------------------------------------------------------
https://opensource.adobe.com/Spry/samples/data_region/JSONDataSetSample.html


items =[
{
"id": "0001",
"type": "donut",
"name": "Cake",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" },
{ "id": "1003", "type": "Blueberry" },
{ "id": "1004", "type": "Devil's Food" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5007", "type": "Powdered Sugar" },
{ "id": "5006", "type": "Chocolate with Sprinkles" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0002",
"type": "donut",
"name": "Raised",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5005", "type": "Sugar" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
},
{
"id": "0003",
"type": "donut",
"name": "Old Fashioned",
"ppu": 0.55,
"batters":
{
"batter":
[
{ "id": "1001", "type": "Regular" },
{ "id": "1002", "type": "Chocolate" }
]
},
"topping":
[
{ "id": "5001", "type": "None" },
{ "id": "5002", "type": "Glazed" },
{ "id": "5003", "type": "Chocolate" },
{ "id": "5004", "type": "Maple" }
]
}
]


write a program to display the below output:


Batters:

Regular (1001)
Chocolate (1002)
Blueberry (1003)
Devil's Food (1004)
Regular (1001)
Regular (1001)
Chocolate (1002)





------------------------------------------------------------------------------------------------------------------------------------

write a program to display all the files and directories of the current path line by line
------------------------------------------------------------------------------------------------------------------------------------

write a program to display all the files and directories of the C:\ line by line
------------------------------------------------------------------------------------------------------------------------------------


write a program to display all the files ending with .py from the local path line by line
------------------------------------------------------------------------------------------------------------------------------------

write a program to delete the files ending with .csv  from the local path 

------------------------------------------------------------------------------------------------------------------------------------

write a program to display all the files and directories seperately

files
------
file1
file2

directories
--------------
dir1
dir2
------------------------------------------------------------------------------------------------------------------------------------

write a program to display the size of .py files

filename  size
------------------
a.py        23 bytes
b.py        34 bytes
------------------------------------------------------------------------------------------------------------------------------------

create two folders as below in the current directory

source     : copy few files to the source
destination: (will be empty)






python
python programming
unix shell scripting
pytttttttttttttttttttthon programming
progrramming in python
jython programming
mython
zython
qython
pyttttttttthon programming
oython
programming in python language
python
pyttthon programming
pylon
pyttthon
pyttttttttttttttttttttthon programming
perl scripting
ruby
scala programming
python or scala
pyttthon programming language
1990


re    ( regex or regular expression )
---

- match   ( only at the beginning of the string)
- search  ( anywhere in the string )
- substitute ( replace the patterns )

meta characters (or) wildcard characters
---------------------------------------
^    : at the beginning of the string
       if re.search("^python", name)  

$    : at the end of the string
       if re.search("python$", line )
*    : zero or more occurences of the preceding character
       if re.search("pyt*hon", line)
       python --------------> valid
       pyhon  ---------------> valid
       pytttttttttthon ------> valid

+    : one or more occurence of the preceding character
       if re.search("pyt+hon", line)
       python --------------> valid
       pyhon  ---------------> Invalid
       pytttttttttthon ------> valid

?    : either zero or one occurence of the preceding character
       if re.search("pyt?hon", line)
       python --------------> valid
       pyhon  ---------------> valid
       pytttttttttthon ------> invalid


.    : any single character or digit or symbol
       if re.search(".ython",line)
	mython  -------------> valid
	jython  -------------> valid
	
(|)  :  (string1|string2)
        if re.search("perl|python" , line)

        if re.search("perl|^python|ruby$" , line)

{}   :  { min,max}    min to max occurences of preceding character
        if re.search("pyt{2,5}thon",line)
         python ---------------> Invalid
         pyhon   ---------------> Invalid
         pytttthon -------------> valid

[]   : any character or digit or symbol defined in []
         if re.search("[abcdezy]ython", line )
         aython   --------------> valid
         bython   --------------> valid
         dython   --------------> Ivalid
         mython   --------------> Invalid
         

\d   : any digit
\s   : any white space



import re

line  = "The rain in Spain"
x = re.findall("ai", line)
print(x)


line = "The rain in Spain"
x = re.findall("Portugal", line)
print(x)


line = "The rain in Spain"
x = re.search("\s", line)
print("The first white-space character is located in position:", x.start())


line = "The rain in Spain"
x = re.search("Portugal", line)
print(x)



line = "The rain in Spain"
x = re.sub("\s", "9", line)    # re.sub(pattern , replacment , orig string)
print(x)


import re
string = 'hello 12 hi 89. Howdy 34'
pattern = '\d+'
result = re.findall(pattern, string)
print(result)


import re
string = 'Twelve:12 Eighty nine:89.'
pattern = '\d+'
result = re.split(pattern, string)
print(result)





import re
# multiline string
string = 'abc    12de 23 \n f45 6'
# matches all whitespace characters
pattern = '\s+'
# empty string
replace = ' '
new_string = re.sub(pattern, replace, string)
print(new_string)



import re
string = '39801 356, 2102 1111'
# Three digit number followed by space followed by two digit number
pattern = '(\d{3}) (\d{2})'
# match variable contains a Match object.
match = re.search(pattern, string)
if match:
  print(match.group())
else:
  print("pattern not found")
# Output: 801 35





import re

regex = '^[\w]+@[\w]+'

email = "giridhar276@gmail.com"

if re.search(regex,email):
    print("valid email")
else:
    print("Invalid email")



import re

regex = '^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$'

email = "giridhar276@gmail.com"

if re.search(regex,email):
    print("valid email")
else:
    print("Invalid email")



import socket


ip = '10.10.20.30'

if socket.inet_aton(ip):
    print("Valid IP")
else:
    print("Invalid IP")
    


try:
    ip = '10.10.20.300'

    if socket.inet_aton(ip):
        print("Valid IP")
    else:
        print("Invalid IP")

except Exception as error:
    print(error)






import re    
ip="2.1.1.1000" 
if re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$",ip):
    print("Valid IP")
else:
    print("Invalid IP")
    
    

import re
ip = input("\nEnter Ip address : ")
if re.match("^([1][0-9][0-9].|^[2][5][0-5].|^[2][0-4][0-9].|^[1][0-9][0-9].|^[0-9][0-9].|^[0-9].)([1][0-9][0-9].|[2][5][0-5].|[2][0-4][0-9].|[1][0-9][0-9].|[0-9][0-9].|[0-9].)([1][0-9][0-9].|[2][5][0-5].|[2][0-4][0-9].|[1][0-9][0-9].|[0-9][0-9].|[0-9].)([1][0-9][0-9]|[2][5][0-5]|[2][0-4][0-9]|[1][0-9][0-9]|[0-9][0-9]|[0-9])$",ip):
    print("Valid IP")
else:
    print("Invalid IP")
    



import socket


ip = '10.10.20.30'

if socket.inet_aton(ip):
    print("Valid IP")
else:
    print("Invalid IP")
    

try:
    ip = '10.10.20.300'

    if socket.inet_aton(ip):
        print("Valid IP")
    else:
        print("Invalid IP")

except Exception as error:
    print(error)


copy the below to some file
------------------------------------
https://www.tatacommunications.com
https://www.tatasteel.com
https://www.tatamotors.com
https://www.tcs.com


write  a program to check the status of each url







----------------------------------------------------------------------------------------------------------------------------------------
write a program to write all the numbers from 1 to 10 to the excel file line by line and excel file should be today's timestamp.

20_Nov_2019.xlsx

------------------------------------------------------------------------------------------------------------------------------------------------
write a program to  read your current directory and write all the filenames to the excel file with today's time stamp
--------------------------------------------------------------------------------------------------------------------------------------------------------

write a program to read realestate.csv and write the output to the excel file  ( csv to excel file )

--------------------------------------------------------------------------------------------------------------------------------------------------------



display all the existing databases
-----------------------------------
show databases ;

create your database
----------------------
create database tcl;

accesing your database
---------------------
use tcl;

display all the tables 
-----------------------
show tables    ( will be empty)

creating table
----------------
create table realestate( street varchar(100) , city varchar(100)) ;

inserting the records
-----------------------
insert into realestate values('MG Road','Pune');
insert into realestate values('University Road','Pune');

displaying the records
----------------------
select * from realestate;

display all the fields of table
--------------------------------
desc realestate 



create table realestateinfo ( street varchar(100) , city varchar(100) , zip varchar(100) , state varchar(100) , beds varchar(100) , baths varchar(100) , sq_ft varchar(100) , type varchar(100) , sale_date varchar(100) , price varchar(100) , latitude varchar(100) , longitude varchar(100) );






import pymysql

with pymysql.connect(host="localhost",port=3306, user ='root',password = 'india@123',database='tcl') as db:
    # will display connecting string if successful
    print(db)
    # query
    query = "select * from realestate"
    # executing the query
    db.execute(query)
    # displaying all the records
    for record in db.fetchall():
        print(record)

    # inserting record
    query = "insert into realestate values('{}','{}')".format('Kothrud','Pune')
    db.execute(query)

    # displaying the records
    query = "select * from realestate"
    # executing the query
    db.execute(query)
    # displaying all the records
    for record in db.fetchall():
        print(record)
    



https://github.com/giridhar276/tclpune/archive/master.zip

9550712233
giridhar276@gmail.com



https://github.com/giridhar276/tclpune/archive/master.zip




